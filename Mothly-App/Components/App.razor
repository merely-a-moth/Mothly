<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <base href="/" />
    <link rel="stylesheet" href="bootstrap/bootstrap.min.css" />
    <link rel="stylesheet" href="app.css" />
    <link rel="stylesheet" href="Mothly-App.styles.css" />
    <link rel="icon" type="image/png" href="favicon.png" />
    <script src="_content/Blazor.Extensions.Canvas/blazor.extensions.canvas.js"></script>
    <HeadOutlet @rendermode="RenderModeForPage" />
</head>

<body>
    <Routes @rendermode="RenderModeForPage" />
    <script src="_framework/blazor.web.js"></script>
    <script>
        function renderJS(timeStamp) {
            theInstance.invokeMethodAsync('RenderInBlazor', timeStamp);
            window.requestAnimationFrame(renderJS);
        }

        function resizeCanvasToFitWindow() {
            var holder = document.getElementById('canvasHolder');
            var canvas = holder.querySelector('canvas');
            if (canvas) {
                canvas.width = 1280;
                canvas.height = 1024;
                theInstance.invokeMethodAsync('ResizeInBlazor', canvas.width, canvas.height);
            }
        }

        function addKeyboardListenerEvent(foo) {
            let serializeEvent = function (e) {
                if (e) {
                    return {
                        key: e.key,
                        code: e.keyCode.toString(),
                        location: e.location,
                        repeat: e.repeat,
                        ctrlKey: e.ctrlKey,
                        shiftKey: e.shiftKey,
                        altKey: e.altKey,
                        metaKey: e.metaKey,
                        type: e.type
                    };
                }
            };

            window.document.addEventListener('keydown', function (e) {
                theInstance.invokeMethodAsync('JsKeyDown', serializeEvent(e))
            });
            window.document.addEventListener('keyup', function (e) {
                theInstance.invokeMethodAsync('JsKeyUp', serializeEvent(e))
            });
        }

        window.initRenderJS = (instance) => {
            window.theInstance = instance;
            window.addEventListener("resize", resizeCanvasToFitWindow);
            addKeyboardListenerEvent();
            resizeCanvasToFitWindow();
            window.requestAnimationFrame(renderJS);
        };
    </script>
</body>

</html>

@code {
    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    private IComponentRenderMode? RenderModeForPage => HttpContext.Request.Path.StartsWithSegments("/Account")
        ? null
        : InteractiveServer;
}
